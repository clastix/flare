// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for AvailabilityDaysOfWeek.
const (
	Fri AvailabilityDaysOfWeek = "Fri"
	Mon AvailabilityDaysOfWeek = "Mon"
	Sat AvailabilityDaysOfWeek = "Sat"
	Sun AvailabilityDaysOfWeek = "Sun"
	Thu AvailabilityDaysOfWeek = "Thu"
	Tue AvailabilityDaysOfWeek = "Tue"
	Wed AvailabilityDaysOfWeek = "Wed"
)

// Defines values for BatchCompletionPolicy.
const (
	BatchCompletionPolicyAll BatchCompletionPolicy = "All"
	BatchCompletionPolicyAny BatchCompletionPolicy = "Any"
)

// Defines values for ComplianceCertifications.
const (
	ISO27001 ComplianceCertifications = "ISO27001"
	SOC2     ComplianceCertifications = "SOC2"
)

// Defines values for ComplianceDataResidency.
const (
	EU ComplianceDataResidency = "EU"
)

// Defines values for ConstraintsProviders.
const (
	AWS ConstraintsProviders = "AWS"
	GCP ConstraintsProviders = "GCP"
)

// Defines values for FirewallRuleAction.
const (
	Allow FirewallRuleAction = "allow"
	Deny  FirewallRuleAction = "deny"
)

// Defines values for GPUArchitecture.
const (
	GPUArchitectureAdaLovelace GPUArchitecture = "ada-lovelace"
	GPUArchitectureAmpere      GPUArchitecture = "ampere"
	GPUArchitectureAny         GPUArchitecture = "any"
	GPUArchitectureCdna3       GPUArchitecture = "cdna3"
	GPUArchitectureHopper      GPUArchitecture = "hopper"
	GPUArchitectureRdna3       GPUArchitecture = "rdna3"
	GPUArchitectureTuring      GPUArchitecture = "turing"
	GPUArchitectureVolta       GPUArchitecture = "volta"
)

// Defines values for GPUComputeCapability.
const (
	GPUComputeCapabilityAny GPUComputeCapability = "any"
	GPUComputeCapabilityN7  GPUComputeCapability = "7"
	GPUComputeCapabilityN75 GPUComputeCapability = "7.5"
	GPUComputeCapabilityN8  GPUComputeCapability = "8"
	GPUComputeCapabilityN86 GPUComputeCapability = "8.6"
	GPUComputeCapabilityN9  GPUComputeCapability = "9"
)

// Defines values for GPUModel.
const (
	GPUModelAmdMi300x     GPUModel = "amd-mi300x"
	GPUModelAmdRx7900xtx  GPUModel = "amd-rx-7900xtx"
	GPUModelAny           GPUModel = "any"
	GPUModelNvidiaA100    GPUModel = "nvidia-a100"
	GPUModelNvidiaH100    GPUModel = "nvidia-h100"
	GPUModelNvidiaRtx3090 GPUModel = "nvidia-rtx-3090"
	GPUModelNvidiaRtx4080 GPUModel = "nvidia-rtx-4080"
	GPUModelNvidiaRtx4090 GPUModel = "nvidia-rtx-4090"
	GPUModelNvidiaT4      GPUModel = "nvidia-t4"
	GPUModelNvidiaV100    GPUModel = "nvidia-v100"
)

// Defines values for GPUTier.
const (
	Any       GPUTier = "any"
	Budget    GPUTier = "budget"
	Gaming    GPUTier = "gaming"
	Inference GPUTier = "inference"
	Premium   GPUTier = "premium"
	Standard  GPUTier = "standard"
)

// Defines values for GPUTopology.
const (
	AllToAll GPUTopology = "all-to-all"
	Mesh     GPUTopology = "mesh"
	Nvswitch GPUTopology = "nvswitch"
	Ring     GPUTopology = "ring"
)

// Defines values for IntentObjective.
const (
	BalancedOptimization    IntentObjective = "Balanced_Optimization"
	CostMinimization        IntentObjective = "Cost_Minimization"
	EnergyEfficiency        IntentObjective = "Energy_Efficiency"
	LatencyMinimization     IntentObjective = "Latency_Minimization"
	PerformanceMaximization IntentObjective = "Performance_Maximization"
)

// Defines values for MaintenanceWindowFrequency.
const (
	Monthly MaintenanceWindowFrequency = "monthly"
	Weekly  MaintenanceWindowFrequency = "weekly"
)

// Defines values for PortProtocol.
const (
	TCP PortProtocol = "TCP"
	UDP PortProtocol = "UDP"
)

// Defines values for SecurityNetworkIsolation.
const (
	Private SecurityNetworkIsolation = "private"
	Public  SecurityNetworkIsolation = "public"
)

// Defines values for VolumeType.
const (
	Persistent VolumeType = "persistent"
	Temporary  VolumeType = "temporary"
)

// Defines values for VolumeSourceType.
const (
	Azure VolumeSourceType = "azure"
	Gcs   VolumeSourceType = "gcs"
	S3    VolumeSourceType = "s3"
)

// Defines values for WorkloadCommunicationPattern.
const (
	AllReduce   WorkloadCommunicationPattern = "all-reduce"
	Independent WorkloadCommunicationPattern = "independent"
	Pipeline    WorkloadCommunicationPattern = "pipeline"
)

// Defines values for WorkloadDeploymentStrategy.
const (
	Colocated   WorkloadDeploymentStrategy = "colocated"
	Distributed WorkloadDeploymentStrategy = "distributed"
	Flexibile   WorkloadDeploymentStrategy = "flexibile"
)

// Defines values for WorkloadType.
const (
	WorkloadTypeBatch   WorkloadType = "batch"
	WorkloadTypeService WorkloadType = "service"
)

// Availability defines model for Availability.
type Availability struct {
	// BlackoutDates Unavailable dates (ISO 8601)
	BlackoutDates *[]openapi_types.Date `json:"blackout_dates,omitempty"`

	// DaysOfWeek Days available (e.g., ["Mon", "Tue"])
	DaysOfWeek         []AvailabilityDaysOfWeek `json:"days_of_week"`
	MaintenanceWindows []MaintenanceWindow      `json:"maintenance_windows"`

	// Timezone Timezone (e.g., "Europe/Berlin")
	Timezone string `json:"timezone"`

	// WindowEnd Availability window end (e.g., "17:00")
	WindowEnd string `json:"window_end"`

	// WindowStart Availability window start (e.g., "09:00")
	WindowStart string `json:"window_start"`
}

// AvailabilityDaysOfWeek defines model for Availability.DaysOfWeek.
type AvailabilityDaysOfWeek string

// AvailableGPU defines model for AvailableGPU.
type AvailableGPU struct {
	CostPerHour *string `json:"cost_per_hour,omitempty"`
	Count       *int    `json:"count,omitempty"`
	Location    *string `json:"location,omitempty"`
	Memory      *string `json:"memory,omitempty"`
	Model       *string `json:"model,omitempty"`
	Provider    *string `json:"provider,omitempty"`
}

// AvailableResourcesResponse defines model for AvailableResourcesResponse.
type AvailableResourcesResponse struct {
	AvailableGpus *[]AvailableGPU `json:"available_gpus,omitempty"`
}

// Batch defines model for Batch.
type Batch struct {
	CompletionPolicy *BatchCompletionPolicy `json:"completion_policy,omitempty"`
	MaxRetries       *int                   `json:"max_retries,omitempty"`
	ParallelTasks    *int                   `json:"parallel_tasks,omitempty"`
	Timeout          *string                `json:"timeout,omitempty"`
}

// BatchCompletionPolicy defines model for Batch.CompletionPolicy.
type BatchCompletionPolicy string

// Compliance defines model for Compliance.
type Compliance struct {
	// AuditLogging Require audit logs
	AuditLogging *bool `json:"audit_logging,omitempty"`

	// Certifications Required certifications (ISO27001, SOC2)
	Certifications *[]ComplianceCertifications `json:"certifications,omitempty"`

	// DataResidency Required data locations (e.g., ["EU"])
	DataResidency *[]ComplianceDataResidency `json:"data_residency,omitempty"`

	// EncryptionAtRest Require data encryption
	EncryptionAtRest *bool `json:"encryption_at_rest,omitempty"`

	// EncryptionInTransit Require transit encryption
	EncryptionInTransit *bool `json:"encryption_in_transit,omitempty"`

	// GdprCompliant GDPR compliance required
	GdprCompliant *bool `json:"gdpr_compliant,omitempty"`

	// HipaaCompliant HIPAA compliance required
	HipaaCompliant *bool `json:"hipaa_compliant,omitempty"`
}

// ComplianceCertifications defines model for Compliance.Certifications.
type ComplianceCertifications string

// ComplianceDataResidency defines model for Compliance.DataResidency.
type ComplianceDataResidency string

// Constraints defines model for Constraints.
type Constraints struct {
	Availability *Availability `json:"availability,omitempty"`

	// AvailabilityZone Specific zone
	AvailabilityZone *string     `json:"availability_zone,omitempty"`
	Compliance       *Compliance `json:"compliance,omitempty"`

	// Deadline ISO 8601 timestamp for deadline
	Deadline *time.Time `json:"deadline,omitempty"`
	Energy   *Energy    `json:"energy,omitempty"`

	// Location Geographic preference
	Location *string `json:"location,omitempty"`

	// MaxHourlyCost Max cost per hour (e.g., "10 EUR")
	MaxHourlyCost *string `json:"max_hourly_cost,omitempty"`

	// MaxLatencyMs Max network latency in milliseconds
	MaxLatencyMs *int `json:"max_latency_ms,omitempty"`

	// MaxTotalCost Max total cost for jobs
	MaxTotalCost *string      `json:"max_total_cost,omitempty"`
	Negotiation  *Negotiation `json:"negotiation,omitempty"`
	Performance  *Performance `json:"performance,omitempty"`

	// Preemptible Allow spot instances
	Preemptible *bool `json:"preemptible,omitempty"`

	// Providers Preferred providers
	Providers *[]ConstraintsProviders `json:"providers,omitempty"`
	Security  *Security               `json:"security,omitempty"`
}

// ConstraintsProviders defines model for Constraints.Providers.
type ConstraintsProviders string

// CreateTokenRequest defines model for CreateTokenRequest.
type CreateTokenRequest struct {
	ExpiresIn   *string   `json:"expires_in,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Permissions *[]string `json:"permissions,omitempty"`
	UserId      *string   `json:"user_id,omitempty"`
}

// CreateTokenResponse defines model for CreateTokenResponse.
type CreateTokenResponse struct {
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	ExpiresAt   *time.Time `json:"expires_at,omitempty"`
	Name        *string    `json:"name,omitempty"`
	Permissions *[]string  `json:"permissions,omitempty"`
	Token       *string    `json:"token,omitempty"`
	TokenId     *string    `json:"token_id,omitempty"`
}

// Energy defines model for Energy.
type Energy struct {
	// EnergyEfficiencyRating Minimum efficiency rating (A-F)
	EnergyEfficiencyRating *string `json:"energy_efficiency_rating,omitempty"`

	// GreenCertifiedOnly Require green certifications
	GreenCertifiedOnly *bool `json:"green_certified_only,omitempty"`

	// MaxCarbonFootprint Max CO2 per hour (e.g., "50g CO2/h")
	MaxCarbonFootprint *string `json:"max_carbon_footprint,omitempty"`

	// PowerUsageEffectiveness Max PUE for data centers
	PowerUsageEffectiveness *float32 `json:"power_usage_effectiveness,omitempty"`

	// RenewableEnergyOnly Require renewable energy sources
	RenewableEnergyOnly *bool `json:"renewable_energy_only,omitempty"`
}

// FirewallRule defines model for FirewallRule.
type FirewallRule struct {
	Action   FirewallRuleAction `json:"action"`
	Port     int                `json:"port"`
	Protocol string             `json:"protocol"`
	Source   string             `json:"source"`
}

// FirewallRuleAction defines model for FirewallRule.Action.
type FirewallRuleAction string

// GPU defines model for GPU.
type GPU struct {
	Architecture      *GPUArchitecture      `json:"architecture,omitempty"`
	ClockSpeedMin     *string               `json:"clock_speed_min,omitempty"`
	ComputeCapability *GPUComputeCapability `json:"compute_capability,omitempty"`
	CoresMax          *int                  `json:"cores_max,omitempty"`
	CoresMin          *int                  `json:"cores_min,omitempty"`
	Count             *int                  `json:"count,omitempty"`
	Dedicated         *bool                 `json:"dedicated,omitempty"`

	// Fp32Tflops Performance requirement (e.g.: 19.5, 83.0)
	Fp32Tflops    *float32 `json:"fp32_tflops,omitempty"`
	Interconnect  *string  `json:"interconnect,omitempty"`
	Interruptible *bool    `json:"interruptible,omitempty"`
	MemoryMax     *string  `json:"memory_max,omitempty"`

	// MemoryMin Minimum GPU memory
	MemoryMin *string   `json:"memory_min,omitempty"`
	Model     *GPUModel `json:"model,omitempty"`

	// MultiGpuEfficiency Multi-GPU efficiency score (e.g.: 0.95, 0.85)
	MultiGpuEfficiency *float32 `json:"multi_gpu_efficiency,omitempty"`
	MultiInstance      *bool    `json:"multi_instance,omitempty"`
	Shared             *bool    `json:"shared,omitempty"`
	Tier               *GPUTier `json:"tier,omitempty"`

	// Topology Multi-GPU topology
	Topology *GPUTopology `json:"topology,omitempty"`
}

// GPUArchitecture defines model for GPU.Architecture.
type GPUArchitecture string

// GPUComputeCapability defines model for GPU.ComputeCapability.
type GPUComputeCapability string

// GPUModel defines model for GPU.Model.
type GPUModel string

// GPUTier defines model for GPU.Tier.
type GPUTier string

// GPUTopology Multi-GPU topology
type GPUTopology string

// Intent defines model for Intent.
type Intent struct {
	Constraints *Constraints     `json:"constraints,omitempty"`
	Objective   IntentObjective  `json:"objective"`
	Sla         *SLARequirements `json:"sla,omitempty"`
	Workload    Workload         `json:"workload"`
}

// IntentObjective defines model for Intent.Objective.
type IntentObjective string

// IntentStatus defines model for IntentStatus.
type IntentStatus struct {
	CurrentCost    *string `json:"current_cost,omitempty"`
	GpuUtilization *string `json:"gpu_utilization,omitempty"`
	IntentId       *string `json:"intent_id,omitempty"`
	Message        *string `json:"message,omitempty"`
	Runtime        *string `json:"runtime,omitempty"`
	Status         *string `json:"status,omitempty"`
	WorkloadUrl    *string `json:"workload_url,omitempty"`
}

// IntentSubmission defines model for IntentSubmission.
type IntentSubmission struct {
	Intent *Intent `json:"intent,omitempty"`
}

// ListIntentsResponse defines model for ListIntentsResponse.
type ListIntentsResponse struct {
	Tokens *[]IntentStatus `json:"tokens,omitempty"`
}

// ListTokensResponse defines model for ListTokensResponse.
type ListTokensResponse struct {
	Tokens *[]Token `json:"tokens,omitempty"`
}

// MaintenanceWindow defines model for MaintenanceWindow.
type MaintenanceWindow struct {
	// End End time of maintenance window (ISO 8601)
	End time.Time `json:"end"`

	// Frequency Frequency of maintenance window
	Frequency *MaintenanceWindowFrequency `json:"frequency,omitempty"`

	// Start Start time of maintenance window (ISO 8601)
	Start time.Time `json:"start"`
}

// MaintenanceWindowFrequency Frequency of maintenance window
type MaintenanceWindowFrequency string

// Negotiation defines model for Negotiation.
type Negotiation struct {
	AutoAcceptThreshold  *float32 `json:"auto_accept_threshold,omitempty"`
	FallbackStrategy     *string  `json:"fallback_strategy,omitempty"`
	MaxNegotiationRounds *int     `json:"max_negotiation_rounds,omitempty"`
	PriceFlexibility     *float32 `json:"price_flexibility,omitempty"`
	ResourceFlexibility  *float32 `json:"resource_flexibility,omitempty"`
	TimeoutSeconds       *int     `json:"timeout_seconds,omitempty"`
}

// Performance defines model for Performance.
type Performance struct {
	// GpuUtilizationTarget Target GPU utilization
	GpuUtilizationTarget *float32 `json:"gpu_utilization_target,omitempty"`

	// MaxColdStartTime Max startup time (e.g., "30s")
	MaxColdStartTime *string `json:"max_cold_start_time,omitempty"`

	// MaxJitterMs Max network jitter
	MaxJitterMs *int `json:"max_jitter_ms,omitempty"`

	// MemoryUtilizationTarget Target memory utilization
	MemoryUtilizationTarget *float32 `json:"memory_utilization_target,omitempty"`

	// MinNetworkBandwidth Min bandwidth (e.g., "10Gbps")
	MinNetworkBandwidth *string `json:"min_network_bandwidth,omitempty"`

	// MinUptimePercent Minimum uptime guarantee (default: 99.0)
	MinUptimePercent *float32 `json:"min_uptime_percent,omitempty"`
}

// Port defines model for Port.
type Port struct {
	Domain   *string       `json:"domain,omitempty"`
	Expose   *bool         `json:"expose,omitempty"`
	Port     int           `json:"port"`
	Protocol *PortProtocol `json:"protocol,omitempty"`
}

// PortProtocol defines model for Port.Protocol.
type PortProtocol string

// Resources defines model for Resources.
type Resources struct {
	Cpu    *string `json:"cpu,omitempty"`
	Gpu    *GPU    `json:"gpu,omitempty"`
	Memory *string `json:"memory,omitempty"`
}

// RevokeTokenResponse defines model for RevokeTokenResponse.
type RevokeTokenResponse struct {
	Message   *string    `json:"message,omitempty"`
	RevokedAt *time.Time `json:"revoked_at,omitempty"`
	TokenId   *string    `json:"token_id,omitempty"`
}

// SLARequirements defines model for SLARequirements.
type SLARequirements struct {
	// Availability Uptime requirement (e.g., "99.9%")
	Availability *string `json:"availability,omitempty"`

	// BackupStrategy Data backup approach
	BackupStrategy *string `json:"backup_strategy,omitempty"`

	// MaxInterruptionTime Maximum acceptable downtime (e.g., "5m")
	MaxInterruptionTime *string `json:"max_interruption_time,omitempty"`
}

// Scaling defines model for Scaling.
type Scaling struct {
	AutoScale        *bool `json:"auto_scale,omitempty"`
	MaxReplicas      *int  `json:"max_replicas,omitempty"`
	MinReplicas      *int  `json:"min_replicas,omitempty"`
	TargetCpuPercent *int  `json:"target_cpu_percent,omitempty"`
	TargetGpuPercent *int  `json:"target_gpu_percent,omitempty"`
}

// Secret defines model for Secret.
type Secret struct {
	Env  string `json:"env"`
	Name string `json:"name"`
}

// Security defines model for Security.
type Security struct {
	// BastionHost Require bastion host
	BastionHost   *bool           `json:"bastion_host,omitempty"`
	FirewallRules *[]FirewallRule `json:"firewall_rules,omitempty"`

	// IntrusionDetection Enable IDS/IPS
	IntrusionDetection *bool                     `json:"intrusion_detection,omitempty"`
	NetworkIsolation   *SecurityNetworkIsolation `json:"network_isolation,omitempty"`

	// VpnAccess Require VPN access
	VpnAccess *bool `json:"vpn_access,omitempty"`

	// VulnerabilityScanning Enable vulnerability scans
	VulnerabilityScanning *bool `json:"vulnerability_scanning,omitempty"`
}

// SecurityNetworkIsolation defines model for Security.NetworkIsolation.
type SecurityNetworkIsolation string

// Storage defines model for Storage.
type Storage struct {
	Volumes *[]Volume `json:"volumes,omitempty"`
}

// SubmitIntentResponse defines model for SubmitIntentResponse.
type SubmitIntentResponse struct {
	EstimatedCost      *string    `json:"estimated_cost,omitempty"`
	EstimatedStartTime *time.Time `json:"estimated_start_time,omitempty"`
	IntentId           *string    `json:"intent_id,omitempty"`
	Message            *string    `json:"message,omitempty"`
	Status             *string    `json:"status,omitempty"`
}

// Token defines model for Token.
type Token struct {
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	ExpiresAt   *time.Time `json:"expires_at,omitempty"`
	LastUsed    *time.Time `json:"last_used,omitempty"`
	Name        *string    `json:"name,omitempty"`
	Permissions *[]string  `json:"permissions,omitempty"`
	Status      *string    `json:"status,omitempty"`
	TokenId     *string    `json:"token_id,omitempty"`
}

// Volume defines model for Volume.
type Volume struct {
	Name   string        `json:"name"`
	Path   string        `json:"path"`
	Size   string        `json:"size"`
	Source *VolumeSource `json:"source,omitempty"`
	Type   VolumeType    `json:"type"`
}

// VolumeType defines model for Volume.Type.
type VolumeType string

// VolumeSource defines model for VolumeSource.
type VolumeSource struct {
	Credentials *string           `json:"credentials,omitempty"`
	Type        *VolumeSourceType `json:"type,omitempty"`
	Uri         *string           `json:"uri,omitempty"`
}

// VolumeSourceType defines model for VolumeSource.Type.
type VolumeSourceType string

// Workload defines model for Workload.
type Workload struct {
	Batch                *Batch                        `json:"batch,omitempty"`
	Commands             *[]string                     `json:"commands,omitempty"`
	CommunicationPattern *WorkloadCommunicationPattern `json:"communication_pattern,omitempty"`
	DeploymentStrategy   *WorkloadDeploymentStrategy   `json:"deployment_strategy,omitempty"`
	Env                  *[]string                     `json:"env,omitempty"`
	Image                string                        `json:"image"`
	Name                 string                        `json:"name"`
	Ports                *[]Port                       `json:"ports,omitempty"`
	Resources            Resources                     `json:"resources"`
	Scaling              *Scaling                      `json:"scaling,omitempty"`
	Secrets              *[]Secret                     `json:"secrets,omitempty"`
	Storage              *Storage                      `json:"storage,omitempty"`
	Type                 WorkloadType                  `json:"type"`
}

// WorkloadCommunicationPattern defines model for Workload.CommunicationPattern.
type WorkloadCommunicationPattern string

// WorkloadDeploymentStrategy defines model for Workload.DeploymentStrategy.
type WorkloadDeploymentStrategy string

// WorkloadType defines model for Workload.Type.
type WorkloadType string

// CreateTokenJSONRequestBody defines body for CreateToken for application/json ContentType.
type CreateTokenJSONRequestBody = CreateTokenRequest

// SubmitIntentJSONRequestBody defines body for SubmitIntent for application/json ContentType.
type SubmitIntentJSONRequestBody = IntentSubmission

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List API tokens
	// (GET /auth/tokens)
	ListTokens(ctx echo.Context) error
	// Create API token
	// (POST /auth/tokens)
	CreateToken(ctx echo.Context) error
	// Revoke API token
	// (DELETE /auth/tokens/{token_id})
	RevokeToken(ctx echo.Context, tokenId string) error
	// List all intents for authenticated user
	// (GET /intents)
	ListIntents(ctx echo.Context) error
	// Submit a new workload intent
	// (POST /intents)
	SubmitIntent(ctx echo.Context) error
	// Cancel intent
	// (DELETE /intents/{intent_id})
	CancelIntent(ctx echo.Context, intentId string) error
	// Get intent status
	// (GET /intents/{intent_id})
	GetIntentStatus(ctx echo.Context, intentId string) error
	// Get available GPU resources
	// (GET /resources)
	GetAvailableResources(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListTokens converts echo context to params.
func (w *ServerInterfaceWrapper) ListTokens(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListTokens(ctx)
	return err
}

// CreateToken converts echo context to params.
func (w *ServerInterfaceWrapper) CreateToken(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateToken(ctx)
	return err
}

// RevokeToken converts echo context to params.
func (w *ServerInterfaceWrapper) RevokeToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "token_id" -------------
	var tokenId string

	err = runtime.BindStyledParameterWithOptions("simple", "token_id", ctx.Param("token_id"), &tokenId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RevokeToken(ctx, tokenId)
	return err
}

// ListIntents converts echo context to params.
func (w *ServerInterfaceWrapper) ListIntents(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListIntents(ctx)
	return err
}

// SubmitIntent converts echo context to params.
func (w *ServerInterfaceWrapper) SubmitIntent(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SubmitIntent(ctx)
	return err
}

// CancelIntent converts echo context to params.
func (w *ServerInterfaceWrapper) CancelIntent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "intent_id" -------------
	var intentId string

	err = runtime.BindStyledParameterWithOptions("simple", "intent_id", ctx.Param("intent_id"), &intentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter intent_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CancelIntent(ctx, intentId)
	return err
}

// GetIntentStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetIntentStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "intent_id" -------------
	var intentId string

	err = runtime.BindStyledParameterWithOptions("simple", "intent_id", ctx.Param("intent_id"), &intentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter intent_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIntentStatus(ctx, intentId)
	return err
}

// GetAvailableResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetAvailableResources(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAvailableResources(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/auth/tokens", wrapper.ListTokens)
	router.POST(baseURL+"/auth/tokens", wrapper.CreateToken)
	router.DELETE(baseURL+"/auth/tokens/:token_id", wrapper.RevokeToken)
	router.GET(baseURL+"/intents", wrapper.ListIntents)
	router.POST(baseURL+"/intents", wrapper.SubmitIntent)
	router.DELETE(baseURL+"/intents/:intent_id", wrapper.CancelIntent)
	router.GET(baseURL+"/intents/:intent_id", wrapper.GetIntentStatus)
	router.GET(baseURL+"/resources", wrapper.GetAvailableResources)

}
